{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Example.Infrastructure.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Infrastructure.UnitTests</RootNamespace>\n    <AssemblyName>Example.Infrastructure.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>      \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Infrastructure\\Example.Infrastructure.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Usings.cs",
                        "code": "global using Example.Domain.Enums;\nglobal using Xunit;\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Services/HelloWorldServiceTests.cs",
                        "code": "using Example.Infrastructure.Services;\n\nnamespace Example.Infrastructure.UnitTests.Services;\n\npublic class HelloWorldServiceTests\n{\n    private readonly HelloWorldService _helloWorldService;\n\n    public HelloWorldServiceTests()\n    {\n        _helloWorldService = new HelloWorldService();\n    }\n\n    [Fact]\n    public async Task Should_Create_Returns_Ok()\n    {\n        //arrange\n        string userName = \"test\";\n        int userLevel = (int)UserLevel.Admin;\n\n        //act\n        var result = await _helloWorldService.Create(userName, userLevel);\n        //assert\n        Assert.IsType<Guid>(result.UserId);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Example.Api.IntegrationTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Api.IntegrationTests</RootNamespace>\n    <AssemblyName>Example.Api.IntegrationTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"6.0.3\" />\n    <PackageReference Include=\"WireMock.Net\" Version=\"1.4.40\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Content Include=\"appsettings.json\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </Content>\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Api\\Example.Api.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Usings.cs",
                        "code": "global using System.Net;\nglobal using System.Text;\nglobal using System.Text.Json;\nglobal using Example.Api.IntegrationTests.Utils;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Xunit;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Utils/TestFixture.cs",
                        "code": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing WireMock.Server;\n\nnamespace Example.Api.IntegrationTests.Utils;\n\nclass TestFixture : WebApplicationFactory<Program>\n{\n    public WireMockServer? _mockServer;\n\n    protected override IHost CreateHost(IHostBuilder builder)\n    {\n        builder.ConfigureAppConfiguration((hostingContext, config) =>\n        {\n            config.AddJsonFile(\"appsettings.json\");\n        }).UseEnvironment(\"Development\");\n\n        _mockServer = WireMockBuilder.Build();\n\n        return base.CreateHost(builder);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Utils/WireMockBuilder.cs",
                        "code": "using WireMock.Server;\n\nnamespace Example.Api.IntegrationTests.Utils;\n\npublic class WireMockBuilder\n{\n    protected WireMockBuilder()\n    {\n\n    }\n\n    private static volatile WireMockServer? _server;\n    private static object _syncRoot = new Object();\n\n    public static WireMockServer Build(int port = 5006)\n    {\n        if (_server is null)\n        {\n            lock (_syncRoot)\n            {\n                if (_server is null)\n                    _server = WireMockServer.Start(port);\n            }\n        }\n        return _server;\n    }\n}"
                    }
                ]
            }
        }
    }
}