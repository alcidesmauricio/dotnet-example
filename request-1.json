{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldValidatorTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldValidatorTests\n{\n    private readonly CreateHelloWorldValidator _validator;\n\n    public CreateHelloWorldValidatorTests()\n    {\n        _validator = new CreateHelloWorldValidator();\n    }\n\n    [Fact]\n    public void Should_UserNameIsEmpty()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.False(result.IsValid);\n    }\n\n    [Fact]\n    public void Should_IsValid()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"Test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.True(result.IsValid);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldCommandTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldCommandTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in command.GetType().GetProperties())\n            Assert.False(property.GetValue(command) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldResultTests.cs",
                        "code": "using Example.Application.CreateHelloWorld;\nusing Example.Domain.Enums;\nusing Xunit;\n\nnamespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldResultTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var result = new CreateHelloWorldResult\n        {\n            Id = Guid.NewGuid(),\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in result.GetType().GetProperties())\n            Assert.False(property.GetValue(result) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldHandlerTests.cs",
                        "code": "using Example.Domain.Interfaces.Services;\n\nnamespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldHandlerTests\n{\n    private readonly Mock<ILogger<CreateHelloWorldHandler>> _logger;\n    private readonly Mock<IMapper> _mapper;\n    private readonly Mock<IHelloWorldService> _helloWorldService;\n\n\n    public CreateHelloWorldHandlerTests()\n    {\n        _logger = new Mock<ILogger<CreateHelloWorldHandler>>();\n        _mapper = new Mock<IMapper>();\n        _helloWorldService = new Mock<IHelloWorldService>();\n    }\n\n    [Fact]\n    public async Task Should_Create_Hello_World_Success()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        var response = new HelloWorldResponse\n        {\n            UserId = Guid.NewGuid(),\n            Level = (int)command.Level,\n            UserName = command.UserName\n        };\n\n        var createHelloWorldResult = new CreateHelloWorldResult\n        {\n            Id = response.UserId,\n            Level = (UserLevel)response.Level,\n            UserName = response.UserName\n        };\n\n        var handler = new CreateHelloWorldHandler(_logger.Object,\n                                                    _mapper.Object,\n                                                    _helloWorldService.Object);\n\n        _helloWorldService.Setup(x => x.Create(command.UserName, (int)command.Level))\n                            .ReturnsAsync(response);\n\n        _mapper.Setup(x => x.Map<CreateHelloWorldResult>(It.IsAny<object>())).Returns(createHelloWorldResult);\n\n        //act\n        var result = await handler.Handle(command, default);\n\n        //assert\n        Assert.NotNull(result);\n        _helloWorldService.VerifyAll();\n    }\n\n\n    [Fact]\n    public async Task Should_Create_Hello_World_Throw_Exception()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        var response = new HelloWorldResponse\n        {\n            UserId = Guid.NewGuid(),\n            Level = (int)command.Level,\n            UserName = command.UserName\n        };\n\n        var handler = new CreateHelloWorldHandler(_logger.Object,\n                                                    _mapper.Object,\n                                                    _helloWorldService.Object);\n\n        _helloWorldService.Setup(x => x.Create(command.UserName, (int)command.Level))\n                            .ThrowsAsync(new Exception());\n\n\n        //act\n        //assert\n        await Assert.ThrowsAsync<Exception>(async () => await handler.Handle(command, default));\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Common/Mappings/MappingProfileTests.cs",
                        "code": "namespace Example.Application.UnitTests.Common.Mappings;\n\npublic class MappingProfileTests\n{\n\n    private readonly IConfigurationProvider _configuration;\n    private readonly IMapper _mapper;\n\n    public MappingProfileTests()\n    {\n        _configuration = new MapperConfiguration(config =>\n            config.AddProfile<MappingProfile>());\n\n        _mapper = _configuration.CreateMapper();\n    }\n\n    [Fact]\n    public void ShouldHaveValidConfiguration()\n    {\n        _configuration.AssertConfigurationIsValid();\n    }\n\n    [Theory]\n    [InlineData(typeof(HelloWorldResponse), typeof(CreateHelloWorldResult))]\n    public void ShouldSupportMappingFromSourceToDestination(Type source, Type destination)\n    {\n        var instance = GetInstanceOf(source);\n\n        _mapper.Map(instance, source, destination);\n    }\n\n    private object GetInstanceOf(Type type)\n    {\n        if (type.GetConstructor(Type.EmptyTypes) != null)\n            return Activator.CreateInstance(type)!;\n\n        return FormatterServices.GetUninitializedObject(type);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Example.Infrastructure.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Infrastructure.UnitTests</RootNamespace>\n    <AssemblyName>Example.Infrastructure.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>      \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Infrastructure\\Example.Infrastructure.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Usings.cs",
                        "code": "global using Example.Domain.Enums;\nglobal using Xunit;\n"
                    }
                ]
            }
        }
    }
}