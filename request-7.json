{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Program.cs",
                        "code": "using System.Text.Json.Serialization;\nusing FluentValidation.AspNetCore;\nusing Microsoft.OpenApi.Models;\nusing StackSpot.ErrorHandler;\nusing Example.Application.Common.StackSpot;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddApplication();\nbuilder.Services.AddInfrastructure(builder.Configuration);\nbuilder.Services.AddStackSpot(builder.Configuration, builder.Environment);\n\nbuilder.Services.AddHttpContextAccessor();\n\nbuilder.Services.AddHealthChecks();\nbuilder.Services.AddControllers()\n       .AddFluentValidation(x => x.AutomaticValidationEnabled = false)\n       .AddJsonOptions(x =>\n       {\n            x.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());\n       });\n\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Example.Api\", Version = \"v1\" });\n});\n\nvar app = builder.Build();\n\napp.UseCors(builder => builder\n    .AllowAnyOrigin()\n    .AllowAnyMethod()\n    .AllowAnyHeader());\n\napp.UseSwagger();\napp.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Example.Api v1\"));\n\napp.UseHealthChecks(\"/health\");\napp.UseHttpsRedirection();\n\napp.UseErrorHandler();\napp.UseRouting();\n\napp.MapControllers();\n\napp.UseStackSpot(builder.Configuration, builder.Environment);\n\napp.Run();"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Controllers/HelloWorldController.cs",
                        "code": "using Example.Application.CreateHelloWorld;\n\nnamespace Example.Api.Controllers;\n\n[ApiController]\n[Route(\"[controller]\")]\npublic class HelloWorldController : ControllerBase\n{\n    private readonly IMediator _mediator;\n\n    public HelloWorldController(IMediator mediator)\n    {\n        _mediator = mediator;\n    }\n\n    [HttpPost]\n    [ProducesResponseType(typeof(CreateHelloWorldResult), (int)HttpStatusCode.OK)]\n    [ProducesResponseType(typeof(StackSpot.ErrorHandler.HttpResponse), (int)HttpStatusCode.BadRequest)]\n    public async Task<IActionResult> Post([FromBody] CreateHelloWorldCommand command)\n    {\n        var result = await _mediator.Send(command);\n        return Ok(result);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Example.Domain.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Domain</RootNamespace>\n    <AssemblyName>Example.Domain</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Domain.UnitTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Usings.cs",
                        "code": "global using Example.Domain.Models;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Enums/UserLevel.cs",
                        "code": "namespace Example.Domain.Enums;\n\npublic enum UserLevel\n{\n    None = 0,\n    Readonly = 1,\n    Member = 2,\n    Admin = 3\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Models/HelloWorldResponse.cs",
                        "code": "namespace Example.Domain.Models;\n\npublic class HelloWorldResponse\n{\n    public Guid UserId { get; set; }\n    public string UserName { get; set; } = default!;\n    public int Level { get; set; }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Interfaces/Services/IHelloWorldService.cs",
                        "code": "namespace Example.Domain.Interfaces.Services;\n\npublic interface IHelloWorldService\n{\n    Task<HelloWorldResponse> Create(string userName, int userLevel);\n}"
                    }
                ]
            }
        }
    }
}