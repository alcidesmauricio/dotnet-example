{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Example.Api.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Api.UnitTests</RootNamespace>\n    <AssemblyName>Example.Api.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>    \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>  \n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Api\\Example.Api.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Usings.cs",
                        "code": "global using MediatR;\nglobal using Moq;\nglobal using Example.Api.Controllers;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Xunit;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Controllers/HelloWorldControllerTests.cs",
                        "code": "namespace Example.Api.UnitTests.Controllers;\n\npublic class HelloWorldControllerTests\n{\n    [Fact]\n    public async Task Should_Post_Hello_World_Command_To_Mediator()\n    {\n        //arrange\n        var mediatorMock = new Mock<IMediator>();\n        var createHelloWorldResult = new CreateHelloWorldResult();\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        mediatorMock.Setup(x => x.Send(command, CancellationToken.None)).ReturnsAsync(createHelloWorldResult);\n\n        var controller = new HelloWorldController(mediatorMock.Object);\n        var result = await controller.Post(command);\n\n        //assert\n        mediatorMock.VerifyAll();\n        Assert.NotNull(result);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Example.Application.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Application.UnitTests</RootNamespace>\n    <AssemblyName>Example.Application.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>       \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Application\\Example.Application.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Usings.cs",
                        "code": "global using System.Runtime.Serialization;\nglobal using AutoMapper;\nglobal using Microsoft.Extensions.Logging;\nglobal using Moq;\nglobal using Example.Application.Common.Mappings;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Example.Domain.Models;\nglobal using Xunit;\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldValidatorTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldValidatorTests\n{\n    private readonly CreateHelloWorldValidator _validator;\n\n    public CreateHelloWorldValidatorTests()\n    {\n        _validator = new CreateHelloWorldValidator();\n    }\n\n    [Fact]\n    public void Should_UserNameIsEmpty()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.False(result.IsValid);\n    }\n\n    [Fact]\n    public void Should_IsValid()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"Test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.True(result.IsValid);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldCommandTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldCommandTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in command.GetType().GetProperties())\n            Assert.False(property.GetValue(command) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldResultTests.cs",
                        "code": "using Example.Application.CreateHelloWorld;\nusing Example.Domain.Enums;\nusing Xunit;\n\nnamespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldResultTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var result = new CreateHelloWorldResult\n        {\n            Id = Guid.NewGuid(),\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in result.GetType().GetProperties())\n            Assert.False(property.GetValue(result) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldHandlerTests.cs",
                        "code": "using Example.Domain.Interfaces.Services;\n\nnamespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldHandlerTests\n{\n    private readonly Mock<ILogger<CreateHelloWorldHandler>> _logger;\n    private readonly Mock<IMapper> _mapper;\n    private readonly Mock<IHelloWorldService> _helloWorldService;\n\n\n    public CreateHelloWorldHandlerTests()\n    {\n        _logger = new Mock<ILogger<CreateHelloWorldHandler>>();\n        _mapper = new Mock<IMapper>();\n        _helloWorldService = new Mock<IHelloWorldService>();\n    }\n\n    [Fact]\n    public async Task Should_Create_Hello_World_Success()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        var response = new HelloWorldResponse\n        {\n            UserId = Guid.NewGuid(),\n            Level = (int)command.Level,\n            UserName = command.UserName\n        };\n\n        var createHelloWorldResult = new CreateHelloWorldResult\n        {\n            Id = response.UserId,\n            Level = (UserLevel)response.Level,\n            UserName = response.UserName\n        };\n\n        var handler = new CreateHelloWorldHandler(_logger.Object,\n                                                    _mapper.Object,\n                                                    _helloWorldService.Object);\n\n        _helloWorldService.Setup(x => x.Create(command.UserName, (int)command.Level))\n                            .ReturnsAsync(response);\n\n        _mapper.Setup(x => x.Map<CreateHelloWorldResult>(It.IsAny<object>())).Returns(createHelloWorldResult);\n\n        //act\n        var result = await handler.Handle(command, default);\n\n        //assert\n        Assert.NotNull(result);\n        _helloWorldService.VerifyAll();\n    }\n\n\n    [Fact]\n    public async Task Should_Create_Hello_World_Throw_Exception()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        var response = new HelloWorldResponse\n        {\n            UserId = Guid.NewGuid(),\n            Level = (int)command.Level,\n            UserName = command.UserName\n        };\n\n        var handler = new CreateHelloWorldHandler(_logger.Object,\n                                                    _mapper.Object,\n                                                    _helloWorldService.Object);\n\n        _helloWorldService.Setup(x => x.Create(command.UserName, (int)command.Level))\n                            .ThrowsAsync(new Exception());\n\n\n        //act\n        //assert\n        await Assert.ThrowsAsync<Exception>(async () => await handler.Handle(command, default));\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Common/Mappings/MappingProfileTests.cs",
                        "code": "namespace Example.Application.UnitTests.Common.Mappings;\n\npublic class MappingProfileTests\n{\n\n    private readonly IConfigurationProvider _configuration;\n    private readonly IMapper _mapper;\n\n    public MappingProfileTests()\n    {\n        _configuration = new MapperConfiguration(config =>\n            config.AddProfile<MappingProfile>());\n\n        _mapper = _configuration.CreateMapper();\n    }\n\n    [Fact]\n    public void ShouldHaveValidConfiguration()\n    {\n        _configuration.AssertConfigurationIsValid();\n    }\n\n    [Theory]\n    [InlineData(typeof(HelloWorldResponse), typeof(CreateHelloWorldResult))]\n    public void ShouldSupportMappingFromSourceToDestination(Type source, Type destination)\n    {\n        var instance = GetInstanceOf(source);\n\n        _mapper.Map(instance, source, destination);\n    }\n\n    private object GetInstanceOf(Type type)\n    {\n        if (type.GetConstructor(Type.EmptyTypes) != null)\n            return Activator.CreateInstance(type)!;\n\n        return FormatterServices.GetUninitializedObject(type);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Example.Infrastructure.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Infrastructure.UnitTests</RootNamespace>\n    <AssemblyName>Example.Infrastructure.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>      \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Infrastructure\\Example.Infrastructure.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Usings.cs",
                        "code": "global using Example.Domain.Enums;\nglobal using Xunit;\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Infrastructure.UnitTests/Services/HelloWorldServiceTests.cs",
                        "code": "using Example.Infrastructure.Services;\n\nnamespace Example.Infrastructure.UnitTests.Services;\n\npublic class HelloWorldServiceTests\n{\n    private readonly HelloWorldService _helloWorldService;\n\n    public HelloWorldServiceTests()\n    {\n        _helloWorldService = new HelloWorldService();\n    }\n\n    [Fact]\n    public async Task Should_Create_Returns_Ok()\n    {\n        //arrange\n        string userName = \"test\";\n        int userLevel = (int)UserLevel.Admin;\n\n        //act\n        var result = await _helloWorldService.Create(userName, userLevel);\n        //assert\n        Assert.IsType<Guid>(result.UserId);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Example.Api.IntegrationTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Api.IntegrationTests</RootNamespace>\n    <AssemblyName>Example.Api.IntegrationTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"6.0.3\" />\n    <PackageReference Include=\"WireMock.Net\" Version=\"1.4.40\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Content Include=\"appsettings.json\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </Content>\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Api\\Example.Api.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Usings.cs",
                        "code": "global using System.Net;\nglobal using System.Text;\nglobal using System.Text.Json;\nglobal using Example.Api.IntegrationTests.Utils;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Xunit;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Utils/TestFixture.cs",
                        "code": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing WireMock.Server;\n\nnamespace Example.Api.IntegrationTests.Utils;\n\nclass TestFixture : WebApplicationFactory<Program>\n{\n    public WireMockServer? _mockServer;\n\n    protected override IHost CreateHost(IHostBuilder builder)\n    {\n        builder.ConfigureAppConfiguration((hostingContext, config) =>\n        {\n            config.AddJsonFile(\"appsettings.json\");\n        }).UseEnvironment(\"Development\");\n\n        _mockServer = WireMockBuilder.Build();\n\n        return base.CreateHost(builder);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Utils/WireMockBuilder.cs",
                        "code": "using WireMock.Server;\n\nnamespace Example.Api.IntegrationTests.Utils;\n\npublic class WireMockBuilder\n{\n    protected WireMockBuilder()\n    {\n\n    }\n\n    private static volatile WireMockServer? _server;\n    private static object _syncRoot = new Object();\n\n    public static WireMockServer Build(int port = 5006)\n    {\n        if (_server is null)\n        {\n            lock (_syncRoot)\n            {\n                if (_server is null)\n                    _server = WireMockServer.Start(port);\n            }\n        }\n        return _server;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.IntegrationTests/Controllers/HelloWorldControllerTests.cs",
                        "code": "namespace Example.Api.IntegrationTests.Controllers;\n\npublic class HelloWorldControllerTests\n{\n    private readonly TestFixture _testFixture;\n\n    public HelloWorldControllerTests()\n    {\n        _testFixture = new TestFixture();\n    }\n\n    [Fact]\n    public async Task Should_Hello_World_Create_Return_Success()\n    {\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        var content = new HttpRequestMessage(HttpMethod.Post, $\"HelloWorld\")\n        {\n            Content = new StringContent(JsonSerializer.Serialize(command), Encoding.UTF8, \"application/json\")\n        };\n\n        var response = await _testFixture.CreateClient().SendAsync(content);\n\n        Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n    }\n\n    [Fact]\n    public async Task Should_Hello_World_Create_Return_Bad_Request()\n    {\n        var command = new CreateHelloWorldCommand\n        {\n            Level = UserLevel.Admin\n        };\n\n        var content = new HttpRequestMessage(HttpMethod.Post, $\"HelloWorld\")\n        {\n            Content = new StringContent(JsonSerializer.Serialize(command), Encoding.UTF8, \"application/json\")\n        };\n\n        var response = await _testFixture.CreateClient().SendAsync(content);\n\n        Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Domain.UnitTests/Example.Domain.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Domain.UnitTests</RootNamespace>\n    <AssemblyName>Example.Domain.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>           \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Domain\\Example.Domain.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Domain.UnitTests/Usings.cs",
                        "code": "global using Example.Domain.Enums;\nglobal using Example.Domain.Models;\nglobal using Xunit;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Domain.UnitTests/Models/HelloWorldResponseTests.cs",
                        "code": "namespace Example.Domain.UnitTests.Models;\n\npublic class HelloWorldResponseTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var helloWorldResponse = new HelloWorldResponse\n        {\n            UserName = \"test\",\n            UserId = Guid.NewGuid(),\n            Level = (int)UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in helloWorldResponse.GetType().GetProperties())\n            Assert.False(property.GetValue(helloWorldResponse) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/DependencyInjection.cs",
                        "code": "using Example.Application.Common.Behaviours;\n\nnamespace Example.Application;\n\n[ExcludeFromCodeCoverage]\npublic static class DependencyInjection\n{\n    public static IServiceCollection AddApplication(this IServiceCollection services)\n    {\n        services.AddAutoMapper(Assembly.GetExecutingAssembly());\n        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());\n        services.AddMediatR(Assembly.GetExecutingAssembly());\n        services.AddTransient(typeof(IPipelineBehavior<,>), typeof(ValidationBehaviour<,>));\n\n        return services;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Example.Application.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Application</RootNamespace>\n    <AssemblyName>Example.Application</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Example.Domain\\Example.Domain.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"11.0.0\" />\n    <PackageReference Include=\"FluentValidation.DependencyInjectionExtensions\" Version=\"10.4.0\" />\n    <PackageReference Include=\"MediatR.Extensions.Microsoft.DependencyInjection\" Version=\"10.0.1\" />\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.1\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Abstractions\" Version=\"6.0.0\" />\n    <PackageReference Include=\"StackSpot.ErrorHandler\" Version=\"1.0.1\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.2.7\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting.Abstractions\" Version=\"2.2.0\" />\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Application.UnitTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Usings.cs",
                        "code": "global using System.Diagnostics.CodeAnalysis;\nglobal using System.Net;\nglobal using System.Reflection;\nglobal using AutoMapper;\nglobal using FluentValidation;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Configuration;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Logging;\nglobal using StackSpot.ErrorHandler;\nglobal using Example.Domain.Enums;\nglobal using Example.Domain.Models;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldValidator.cs",
                        "code": "namespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldValidator : AbstractValidator<CreateHelloWorldCommand>\n{\n    public CreateHelloWorldValidator()\n    {\n        RuleFor(command => command.UserName)\n        .NotNull()\n        .NotEmpty();\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldHandler.cs",
                        "code": "using Example.Domain.Interfaces.Services;\n\nnamespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldHandler : IRequestHandler<CreateHelloWorldCommand, CreateHelloWorldResult>\n{\n    private readonly ILogger<CreateHelloWorldHandler> _logger;\n    private readonly IMapper _mapper;\n    private readonly IHelloWorldService _helloWorldService;\n\n\n    public CreateHelloWorldHandler(ILogger<CreateHelloWorldHandler> logger,\n                                    IMapper mapper,\n                                    IHelloWorldService helloWorldService)\n    {\n        _logger = logger;\n        _mapper = mapper;\n        _helloWorldService = helloWorldService;\n    }\n\n    public async Task<CreateHelloWorldResult> Handle(CreateHelloWorldCommand request, CancellationToken cancellationToken)\n    {\n        _logger.LogDebug(\"Init Handle\");\n\n        var response = await _helloWorldService.Create(request.UserName, (int)request.Level);\n        return _mapper.Map<CreateHelloWorldResult>(response);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldCommand.cs",
                        "code": "namespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldCommand : IRequest<CreateHelloWorldResult>\n{\n    public string UserName { get; set; } = default!;\n    public UserLevel Level { get; set; }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldResult.cs",
                        "code": "using Example.Application.Common.Mappings;\n\nnamespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldResult : IMapFrom<HelloWorldResponse>\n{\n    public Guid Id { get; set; }\n    public string UserName { get; set; } = default!;\n    public UserLevel Level { get; set; }\n\n    public void Mapping(Profile profile)\n    {\n        profile.CreateMap<HelloWorldResponse, CreateHelloWorldResult>()\n            .ForMember(d => d.Level, opt => opt.MapFrom(s => (UserLevel)s.Level))\n            .ForMember(d => d.Id, opt => opt.MapFrom(s => s.UserId));\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/StackSpot/DependencyInjection.cs",
                        "code": "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a StackSpot.\n//\n//     Changes to this file may cause incorrect behavior.\n// </auto-generated>\n//------------------------------------------------------------------------------\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace Example.Application.Common.StackSpot;\n\n[ExcludeFromCodeCoverage]\npublic static class DependencyInjection\n{\n    public static IServiceCollection AddStackSpot(this IServiceCollection services, IConfiguration configuration, IWebHostEnvironment environment)\n    {\n        return services;\n    }\n\n    public static IApplicationBuilder UseStackSpot(this IApplicationBuilder app, IConfiguration configuration, IWebHostEnvironment environment)\n    {\n        return app;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Behaviours/ValidationBehaviour.cs",
                        "code": "namespace Example.Application.Common.Behaviours;\n\n[ExcludeFromCodeCoverage]\npublic class ValidationBehaviour<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\n    where TRequest : IRequest<TResponse>\n{\n    private readonly IEnumerable<IValidator<TRequest>> _validators;\n\n    public ValidationBehaviour(IEnumerable<IValidator<TRequest>> validators)\n    {\n        _validators = validators;\n    }\n\n    public async Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next)\n    {\n        if (_validators.Any())\n        {\n            var context = new ValidationContext<TRequest>(request);\n\n            var validationResults = await Task.WhenAll(\n                _validators.Select(v =>\n                    v.ValidateAsync(context, cancellationToken)));\n\n            var failure = validationResults\n                .Where(r => r.Errors.Any())\n                .SelectMany(r => r.Errors)\n                .FirstOrDefault();\n\n            if (failure is not null)\n                throw new HttpResponseException(HttpStatusCode.BadRequest, failure.ErrorMessage, false);\n\n        }\n        return await next();\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Mappings/IMapFrom.cs",
                        "code": "namespace Example.Application.Common.Mappings;\n\npublic interface IMapFrom<T>\n{\n    void Mapping(Profile profile) => profile.CreateMap(typeof(T), GetType());\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Mappings/MappingProfile.cs",
                        "code": "namespace Example.Application.Common.Mappings;\n\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        ApplyMappingsFromAssembly(Assembly.GetExecutingAssembly());\n    }\n\n    private void ApplyMappingsFromAssembly(Assembly assembly)\n    {\n        var types = assembly.GetExportedTypes()\n            .Where(t => t.GetInterfaces().Any(i =>\n                i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IMapFrom<>)))\n            .ToList();\n\n        foreach (var type in types)\n        {\n            var instance = Activator.CreateInstance(type);\n\n            var methodInfo = type.GetMethod(\"Mapping\")\n                ?? type.GetInterface(\"IMapFrom`1\")!.GetMethod(\"Mapping\");\n\n            methodInfo?.Invoke(instance, new object[] { this });\n        }\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Dockerfile",
                        "code": "FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\nWORKDIR /app\nEXPOSE 5000\nEXPOSE 5001\n\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\nWORKDIR /\nCOPY ./ /\n\nRUN dotnet restore \"./src/Example.Api/Example.Api.csproj\"\nRUN dotnet build \"./src/Example.Api/Example.Api.csproj\"\nRUN dotnet test \"Example.Api.sln\"\n\nFROM build AS publish\nRUN dotnet publish \"./src/Example.Api/Example.Api.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"Example.Api.dll\"]\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Example.Api.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <RootNamespace>Example.Api</RootNamespace>\n    <AssemblyName>Example.Api</AssemblyName>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <NoWarn>$(NoWarn);1701;1702;1591</NoWarn>  \n\n    <UserSecretsId>efad71c6-743c-4b87-9de8-f26d77146f6d</UserSecretsId>\n    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>\n    <DockerfileContext>..\\..</DockerfileContext>\n    <DockerComposeProjectPath>..\\..\\docker-compose.dcproj</DockerComposeProjectPath>    \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.3.0\" />\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"10.4.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Example.Application\\Example.Application.csproj\">\n      <GlobalPropertiesToRemove></GlobalPropertiesToRemove>\n    </ProjectReference>\n    <ProjectReference Include=\"..\\Example.Infrastructure\\Example.Infrastructure.csproj\">\n      <GlobalPropertiesToRemove></GlobalPropertiesToRemove>\n    </ProjectReference>\n  </ItemGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Api.IntegrationTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Usings.cs",
                        "code": "global using System.Net;\nglobal using Microsoft.AspNetCore.Mvc;\nglobal using Example.Application;\nglobal using Example.Infrastructure;\nglobal using MediatR;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Program.cs",
                        "code": "using System.Text.Json.Serialization;\nusing FluentValidation.AspNetCore;\nusing Microsoft.OpenApi.Models;\nusing StackSpot.ErrorHandler;\nusing Example.Application.Common.StackSpot;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddApplication();\nbuilder.Services.AddInfrastructure(builder.Configuration);\nbuilder.Services.AddStackSpot(builder.Configuration, builder.Environment);\n\nbuilder.Services.AddHttpContextAccessor();\n\nbuilder.Services.AddHealthChecks();\nbuilder.Services.AddControllers()\n       .AddFluentValidation(x => x.AutomaticValidationEnabled = false)\n       .AddJsonOptions(x =>\n       {\n            x.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());\n       });\n\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Example.Api\", Version = \"v1\" });\n});\n\nvar app = builder.Build();\n\napp.UseCors(builder => builder\n    .AllowAnyOrigin()\n    .AllowAnyMethod()\n    .AllowAnyHeader());\n\napp.UseSwagger();\napp.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Example.Api v1\"));\n\napp.UseHealthChecks(\"/health\");\napp.UseHttpsRedirection();\n\napp.UseErrorHandler();\napp.UseRouting();\n\napp.MapControllers();\n\napp.UseStackSpot(builder.Configuration, builder.Environment);\n\napp.Run();"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Api/Controllers/HelloWorldController.cs",
                        "code": "using Example.Application.CreateHelloWorld;\n\nnamespace Example.Api.Controllers;\n\n[ApiController]\n[Route(\"[controller]\")]\npublic class HelloWorldController : ControllerBase\n{\n    private readonly IMediator _mediator;\n\n    public HelloWorldController(IMediator mediator)\n    {\n        _mediator = mediator;\n    }\n\n    [HttpPost]\n    [ProducesResponseType(typeof(CreateHelloWorldResult), (int)HttpStatusCode.OK)]\n    [ProducesResponseType(typeof(StackSpot.ErrorHandler.HttpResponse), (int)HttpStatusCode.BadRequest)]\n    public async Task<IActionResult> Post([FromBody] CreateHelloWorldCommand command)\n    {\n        var result = await _mediator.Send(command);\n        return Ok(result);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Example.Domain.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Domain</RootNamespace>\n    <AssemblyName>Example.Domain</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Domain.UnitTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Usings.cs",
                        "code": "global using Example.Domain.Models;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Enums/UserLevel.cs",
                        "code": "namespace Example.Domain.Enums;\n\npublic enum UserLevel\n{\n    None = 0,\n    Readonly = 1,\n    Member = 2,\n    Admin = 3\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Models/HelloWorldResponse.cs",
                        "code": "namespace Example.Domain.Models;\n\npublic class HelloWorldResponse\n{\n    public Guid UserId { get; set; }\n    public string UserName { get; set; } = default!;\n    public int Level { get; set; }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Domain/Interfaces/Services/IHelloWorldService.cs",
                        "code": "namespace Example.Domain.Interfaces.Services;\n\npublic interface IHelloWorldService\n{\n    Task<HelloWorldResponse> Create(string userName, int userLevel);\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Infrastructure/Example.Infrastructure.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Infrastructure</RootNamespace>\n    <AssemblyName>Example.Infrastructure</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>    \n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Example.Domain\\Example.Domain.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.1\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Abstractions\" Version=\"6.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Infrastructure.UnitTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Infrastructure/DependencyInjection.cs",
                        "code": "using Example.Domain.Interfaces.Services;\nusing Example.Infrastructure.Services;\n\nnamespace Example.Infrastructure;\n\n[ExcludeFromCodeCoverage]\npublic static class DependencyInjection\n{\n    public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)\n    {\n        services.AddScoped<IHelloWorldService, HelloWorldService>();\n        return services;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Infrastructure/Usings.cs",
                        "code": "global using System.Diagnostics.CodeAnalysis;\nglobal using Microsoft.Extensions.Configuration;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Example.Domain.Models;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Infrastructure/Services/HelloWorldService.cs",
                        "code": "using Example.Domain.Interfaces.Services;\nusing Example.Domain.Models;\n\nnamespace Example.Infrastructure.Services\n{\n    public class HelloWorldService : IHelloWorldService\n    {\n        public async Task<HelloWorldResponse> Create(string userName, int userLevel)\n        {\n            await Task.Delay(2000);\n            return new HelloWorldResponse\n            {\n                UserId = Guid.NewGuid(),\n                Level = userLevel,\n                UserName = userName\n            };\n        }\n    }\n}"
                    }
                ]
            }
        }
    }
}