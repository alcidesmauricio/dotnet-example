{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Example.Api.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Api.UnitTests</RootNamespace>\n    <AssemblyName>Example.Api.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>    \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>  \n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Api\\Example.Api.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Usings.cs",
                        "code": "global using MediatR;\nglobal using Moq;\nglobal using Example.Api.Controllers;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Xunit;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Api.UnitTests/Controllers/HelloWorldControllerTests.cs",
                        "code": "namespace Example.Api.UnitTests.Controllers;\n\npublic class HelloWorldControllerTests\n{\n    [Fact]\n    public async Task Should_Post_Hello_World_Command_To_Mediator()\n    {\n        //arrange\n        var mediatorMock = new Mock<IMediator>();\n        var createHelloWorldResult = new CreateHelloWorldResult();\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        mediatorMock.Setup(x => x.Send(command, CancellationToken.None)).ReturnsAsync(createHelloWorldResult);\n\n        var controller = new HelloWorldController(mediatorMock.Object);\n        var result = await controller.Post(command);\n\n        //assert\n        mediatorMock.VerifyAll();\n        Assert.NotNull(result);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Example.Application.UnitTests.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Application.UnitTests</RootNamespace>\n    <AssemblyName>Example.Application.UnitTests</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>       \n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.1.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.17.2\" />\n    <PackageReference Include=\"Shouldly\" Version=\"4.0.3\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.2\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.msbuild\" Version=\"3.1.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.6.0\" />\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"6.0.1\" />\n    <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" />    \n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Example.Application\\Example.Application.csproj\" />\n  </ItemGroup>\n</Project>\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/Usings.cs",
                        "code": "global using System.Runtime.Serialization;\nglobal using AutoMapper;\nglobal using Microsoft.Extensions.Logging;\nglobal using Moq;\nglobal using Example.Application.Common.Mappings;\nglobal using Example.Application.CreateHelloWorld;\nglobal using Example.Domain.Enums;\nglobal using Example.Domain.Models;\nglobal using Xunit;\n"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldValidatorTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldValidatorTests\n{\n    private readonly CreateHelloWorldValidator _validator;\n\n    public CreateHelloWorldValidatorTests()\n    {\n        _validator = new CreateHelloWorldValidator();\n    }\n\n    [Fact]\n    public void Should_UserNameIsEmpty()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.False(result.IsValid);\n    }\n\n    [Fact]\n    public void Should_IsValid()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"Test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        var result = _validator.Validate(command);\n        //assert\n        Assert.True(result.IsValid);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Application.UnitTests/CreateHelloWorld/CreateHelloWorldCommandTests.cs",
                        "code": "namespace Example.Application.UnitTests.CreateHelloWorld;\n\npublic class CreateHelloWorldCommandTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var command = new CreateHelloWorldCommand\n        {\n            UserName = \"test\",\n            Level = UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in command.GetType().GetProperties())\n            Assert.False(property.GetValue(command) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    }
                ]
            }
        }
    }
}