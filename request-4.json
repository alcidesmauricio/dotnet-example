{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/tests/Example.Domain.UnitTests/Models/HelloWorldResponseTests.cs",
                        "code": "namespace Example.Domain.UnitTests.Models;\n\npublic class HelloWorldResponseTests\n{\n    [Fact]\n    public void Should_Fill_All_Properties()\n    {\n        //arrange\n        var helloWorldResponse = new HelloWorldResponse\n        {\n            UserName = \"test\",\n            UserId = Guid.NewGuid(),\n            Level = (int)UserLevel.Admin\n        };\n\n        //act\n        //assert\n        foreach (var property in helloWorldResponse.GetType().GetProperties())\n            Assert.False(property.GetValue(helloWorldResponse) == default, $\"{property.DeclaringType}.{property.Name} is default value.\");\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/DependencyInjection.cs",
                        "code": "using Example.Application.Common.Behaviours;\n\nnamespace Example.Application;\n\n[ExcludeFromCodeCoverage]\npublic static class DependencyInjection\n{\n    public static IServiceCollection AddApplication(this IServiceCollection services)\n    {\n        services.AddAutoMapper(Assembly.GetExecutingAssembly());\n        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());\n        services.AddMediatR(Assembly.GetExecutingAssembly());\n        services.AddTransient(typeof(IPipelineBehavior<,>), typeof(ValidationBehaviour<,>));\n\n        return services;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Example.Application.csproj",
                        "code": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>Example.Application</RootNamespace>\n    <AssemblyName>Example.Application</AssemblyName>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Example.Domain\\Example.Domain.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"11.0.0\" />\n    <PackageReference Include=\"FluentValidation.DependencyInjectionExtensions\" Version=\"10.4.0\" />\n    <PackageReference Include=\"MediatR.Extensions.Microsoft.DependencyInjection\" Version=\"10.0.1\" />\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.1\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Abstractions\" Version=\"6.0.0\" />\n    <PackageReference Include=\"StackSpot.ErrorHandler\" Version=\"1.0.1\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.2.7\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting.Abstractions\" Version=\"2.2.0\" />\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <InternalsVisibleTo Include =\"Example.Application.UnitTests\" />\n  </ItemGroup>\n\n</Project>"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Usings.cs",
                        "code": "global using System.Diagnostics.CodeAnalysis;\nglobal using System.Net;\nglobal using System.Reflection;\nglobal using AutoMapper;\nglobal using FluentValidation;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Configuration;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Logging;\nglobal using StackSpot.ErrorHandler;\nglobal using Example.Domain.Enums;\nglobal using Example.Domain.Models;"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldValidator.cs",
                        "code": "namespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldValidator : AbstractValidator<CreateHelloWorldCommand>\n{\n    public CreateHelloWorldValidator()\n    {\n        RuleFor(command => command.UserName)\n        .NotNull()\n        .NotEmpty();\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldHandler.cs",
                        "code": "using Example.Domain.Interfaces.Services;\n\nnamespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldHandler : IRequestHandler<CreateHelloWorldCommand, CreateHelloWorldResult>\n{\n    private readonly ILogger<CreateHelloWorldHandler> _logger;\n    private readonly IMapper _mapper;\n    private readonly IHelloWorldService _helloWorldService;\n\n\n    public CreateHelloWorldHandler(ILogger<CreateHelloWorldHandler> logger,\n                                    IMapper mapper,\n                                    IHelloWorldService helloWorldService)\n    {\n        _logger = logger;\n        _mapper = mapper;\n        _helloWorldService = helloWorldService;\n    }\n\n    public async Task<CreateHelloWorldResult> Handle(CreateHelloWorldCommand request, CancellationToken cancellationToken)\n    {\n        _logger.LogDebug(\"Init Handle\");\n\n        var response = await _helloWorldService.Create(request.UserName, (int)request.Level);\n        return _mapper.Map<CreateHelloWorldResult>(response);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldCommand.cs",
                        "code": "namespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldCommand : IRequest<CreateHelloWorldResult>\n{\n    public string UserName { get; set; } = default!;\n    public UserLevel Level { get; set; }\n}"
                    }
                ]
            }
        }
    }
}