{
    "input_data": {
        "json": {
            "data": {
                "desired_dotnet_version": "net8",
                "files": [
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldHandler.cs",
                        "code": "using Example.Domain.Interfaces.Services;\n\nnamespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldHandler : IRequestHandler<CreateHelloWorldCommand, CreateHelloWorldResult>\n{\n    private readonly ILogger<CreateHelloWorldHandler> _logger;\n    private readonly IMapper _mapper;\n    private readonly IHelloWorldService _helloWorldService;\n\n\n    public CreateHelloWorldHandler(ILogger<CreateHelloWorldHandler> logger,\n                                    IMapper mapper,\n                                    IHelloWorldService helloWorldService)\n    {\n        _logger = logger;\n        _mapper = mapper;\n        _helloWorldService = helloWorldService;\n    }\n\n    public async Task<CreateHelloWorldResult> Handle(CreateHelloWorldCommand request, CancellationToken cancellationToken)\n    {\n        _logger.LogDebug(\"Init Handle\");\n\n        var response = await _helloWorldService.Create(request.UserName, (int)request.Level);\n        return _mapper.Map<CreateHelloWorldResult>(response);\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldCommand.cs",
                        "code": "namespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldCommand : IRequest<CreateHelloWorldResult>\n{\n    public string UserName { get; set; } = default!;\n    public UserLevel Level { get; set; }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/CreateHelloWorld/CreateHelloWorldResult.cs",
                        "code": "using Example.Application.Common.Mappings;\n\nnamespace Example.Application.CreateHelloWorld;\n\npublic class CreateHelloWorldResult : IMapFrom<HelloWorldResponse>\n{\n    public Guid Id { get; set; }\n    public string UserName { get; set; } = default!;\n    public UserLevel Level { get; set; }\n\n    public void Mapping(Profile profile)\n    {\n        profile.CreateMap<HelloWorldResponse, CreateHelloWorldResult>()\n            .ForMember(d => d.Level, opt => opt.MapFrom(s => (UserLevel)s.Level))\n            .ForMember(d => d.Id, opt => opt.MapFrom(s => s.UserId));\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/StackSpot/DependencyInjection.cs",
                        "code": "//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a StackSpot.\n//\n//     Changes to this file may cause incorrect behavior.\n// </auto-generated>\n//------------------------------------------------------------------------------\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace Example.Application.Common.StackSpot;\n\n[ExcludeFromCodeCoverage]\npublic static class DependencyInjection\n{\n    public static IServiceCollection AddStackSpot(this IServiceCollection services, IConfiguration configuration, IWebHostEnvironment environment)\n    {\n        return services;\n    }\n\n    public static IApplicationBuilder UseStackSpot(this IApplicationBuilder app, IConfiguration configuration, IWebHostEnvironment environment)\n    {\n        return app;\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Behaviours/ValidationBehaviour.cs",
                        "code": "namespace Example.Application.Common.Behaviours;\n\n[ExcludeFromCodeCoverage]\npublic class ValidationBehaviour<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\n    where TRequest : IRequest<TResponse>\n{\n    private readonly IEnumerable<IValidator<TRequest>> _validators;\n\n    public ValidationBehaviour(IEnumerable<IValidator<TRequest>> validators)\n    {\n        _validators = validators;\n    }\n\n    public async Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next)\n    {\n        if (_validators.Any())\n        {\n            var context = new ValidationContext<TRequest>(request);\n\n            var validationResults = await Task.WhenAll(\n                _validators.Select(v =>\n                    v.ValidateAsync(context, cancellationToken)));\n\n            var failure = validationResults\n                .Where(r => r.Errors.Any())\n                .SelectMany(r => r.Errors)\n                .FirstOrDefault();\n\n            if (failure is not null)\n                throw new HttpResponseException(HttpStatusCode.BadRequest, failure.ErrorMessage, false);\n\n        }\n        return await next();\n    }\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Mappings/IMapFrom.cs",
                        "code": "namespace Example.Application.Common.Mappings;\n\npublic interface IMapFrom<T>\n{\n    void Mapping(Profile profile) => profile.CreateMap(typeof(T), GetType());\n}"
                    },
                    {
                        "path": "/Users/alcides.filho/poc/dotnet-example/repo/src/Example.Application/Common/Mappings/MappingProfile.cs",
                        "code": "namespace Example.Application.Common.Mappings;\n\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        ApplyMappingsFromAssembly(Assembly.GetExecutingAssembly());\n    }\n\n    private void ApplyMappingsFromAssembly(Assembly assembly)\n    {\n        var types = assembly.GetExportedTypes()\n            .Where(t => t.GetInterfaces().Any(i =>\n                i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IMapFrom<>)))\n            .ToList();\n\n        foreach (var type in types)\n        {\n            var instance = Activator.CreateInstance(type);\n\n            var methodInfo = type.GetMethod(\"Mapping\")\n                ?? type.GetInterface(\"IMapFrom`1\")!.GetMethod(\"Mapping\");\n\n            methodInfo?.Invoke(instance, new object[] { this });\n        }\n    }\n}"
                    }
                ]
            }
        }
    }
}